name: X visibility monitor (GitHub Actions)

on:
  schedule:
    - cron: "0 */6 * * *"    # kicks off a loop every 6h
  workflow_dispatch:

permissions:
  actions: read
  contents: read

concurrency:
  group: x-visibility-monitor
  cancel-in-progress: true

jobs:
  monitor-loop:
    runs-on: ubuntu-latest
    env:
      USERNAME: ${{ secrets.X_USERNAME }}
      UA: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126 Safari/537.36"
      LOOPS: "55"                  # ~55 minutes per run
      SLEEP_SECONDS: "60"
    steps:
      - name: Echo start (6h heartbeat)
        run: |
          echo "Start UTC: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "This run is the 6h heartbeat."

      - name: Download last state/artifacts (if exist)
        id: prev
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: x-visibility-monitor.yml
          branch: main
          name: x-endpoint-${{ env.USERNAME }}
          path: prev
        continue-on-error: true

      - name: Monitor loop (minute checks, notify only on 6h heartbeat or PUBLIC transition)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p out
          # seed state from last run if present
          if [ -f prev/state.txt ]; then cp prev/state.txt out/state.txt; else echo "UNKNOWN" > out/state.txt; fi

          get_state() {
            local TS=$(date -u +%s)
            # try widgets (two hosts)
            for host in "https://cdn.syndication.twimg.com" "https://syndication.twitter.com"; do
              curl -sS --compressed --http1.1 \
                -H "User-Agent: ${UA}" \
                -H "Accept: application/json, text/javascript, */*; q=0.01" \
                -H "Referer: https://platform.twitter.com/" \
                "${host}/widgets/followbutton/info.json?screen_names=${USERNAME}&_=${TS}" \
                -o out/widgets.json || true
              if grep -qE '"protected"\s*:\s*true' out/widgets.json; then
                echo "PRIVATE"; echo "widgets:${host##https://}"; return
              elif grep -qE '"protected"\s*:\s*false' out/widgets.json; then
                echo "PUBLIC"; echo "widgets:${host##https://}"; return
              fi
            done
            # fallback reader
            curl -sS --compressed -L --http1.1 -H "User-Agent: ${UA}" \
              "https://r.jina.ai/http://x.com/${USERNAME}" > out/profile.html || true
            if grep -qi "These posts are protected" out/profile.html; then
              echo "PRIVATE"; echo "reader:jina"; return
            elif grep -qi "This account doesn’t exist\|This account doesn't exist" out/profile.html; then
              echo "MISSING"; echo "reader:jina"; return
            else
              echo "PUBLIC"; echo "reader:jina"; return
            fi
          }

          # -------- 6h HEARTBEAT (one-time per run) --------
          mapfile -t HB < <(get_state)
          HB_STATE="${HB[0]:-UNKNOWN}"
          HB_SRC="${HB[1]:-unknown}"

          if [ -n "${TELEGRAM_BOT_TOKEN:-}" ] && [ -n "${TELEGRAM_CHAT_ID:-}" ]; then
            NOW_UTC="$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            NOW_PT="$(TZ=Europe/Lisbon date '+%Y-%m-%d %H:%M:%S %Z')"
            TEXT="⚙️ *[GitHub Actions LOOP]*\n\
Heartbeat 6h: *${HB_STATE}* • Fonte: ${HB_SRC}\n\
Perfil: [@${USERNAME}](https://x.com/${USERNAME})\n\
🕒 Cadência simulada ~1min (loop interno)\n\n\
UTC: ${NOW_UTC}\nLisboa: ${NOW_PT}"
            curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_ID}" -d parse_mode="Markdown" \
              --data-urlencode "text=${TEXT}" >/dev/null || true
          fi

          # store heartbeat state as the "previous" baseline for the loop
          echo "${HB_STATE}" > out/state.txt

          # -------- Minute loop: ONLY notify on transition to PUBLIC --------
          LOOP=1
          while [ $LOOP -le ${LOOPS} ]; do
            NOW_UTC="$(date -u '+%Y-%m-%d %H:%M:%S')"
            echo "::group::[${NOW_UTC}] Iteration $LOOP/${LOOPS}"

            PREV_STATE="$(tr -d '\r\n' < out/state.txt || echo UNKNOWN)"

            mapfile -t RES < <(get_state)
            CUR_STATE="${RES[0]:-UNKNOWN}"
            SRC="${RES[1]:-unknown}"
            echo "Current: $CUR_STATE (via $SRC) | Previous: $PREV_STATE"

            # Notify ONLY if we just transitioned to PUBLIC
            if [ "$CUR_STATE" = "PUBLIC" ] && [ "$PREV_STATE" != "PUBLIC" ]; then
              if [ -n "${TELEGRAM_BOT_TOKEN:-}" ] && [ -n "${TELEGRAM_CHAT_ID:-}" ]; then
                NOW_UTC_TS="$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
                NOW_PT_TS="$(TZ=Europe/Lisbon date '+%Y-%m-%d %H:%M:%S %Z')"
                TEXT="⚙️ *[GitHub Actions LOOP]*\n\
Estado: *PUBLIC* • Fonte: ${SRC}\n\
Motivo: Transição para PÚBLICO\n\
Perfil: [@${USERNAME}](https://x.com/${USERNAME})\n\
🕒 Cadência simulada ~1min (loop interno)\n\n\
UTC: ${NOW_UTC_TS}\nLisboa: ${NOW_PT_TS}"
                curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                  -d chat_id="${TELEGRAM_CHAT_ID}" -d parse_mode="Markdown" \
                  --data-urlencode "text=${TEXT}" >/dev/null || true
              fi
            fi

            # persist current for next iteration
            echo "$CUR_STATE" > out/state.txt

            echo "::endgroup::"
            sleep "${SLEEP_SECONDS}"
            LOOP=$((LOOP+1))
          done

      - name: Upload artifacts (state persistence)
        uses: actions/upload-artifact@v4
        with:
          name: x-endpoint-${{ env.USERNAME }}
          path: |
            out/state.txt
            out/profile.html
            out/widgets.json
